from django import forms
from django.core.exceptions import ValidationError

from forms_demos.web.model_validators import validate_max_todos_per_person
from forms_demos.web.validators import validate_text, ValueInRangeValidator
from forms_demos.web.models import Todo, Person


class TodoForm(forms.Form):
    text = forms.CharField(
        max_length=30,
        validators=(
            validate_text,
        ),
    )

    is_done = forms.BooleanField(
        required=False,
    )

    priority = forms.IntegerField(
        validators=(
            # custom Functions validator
            # validate_priority,

            # custom Class validator
            ValueInRangeValidator(1, 10),

            # build in Class validator
            # MinValueValidator(1),
            # MaxValueValidator(10),
        ),
    )

    # Second way to validate forms
    # - clean methods autogenerated form Django
    # - each fild has clean method
    def clean_text(self):
        pass

    def clean_priority(self):
        pass

    def clean_is_done(self):
        pass


# ModelForm inherit validators form Model, but they also can upgrade them
class TodoCreateFrom(forms.ModelForm):
    class Meta:
        model = Todo
        fields = '__all__'

    # the parent clean method do clean on hole form
    def clean(self):
        return super().clean()

    # method should be with name `clean_` + `filed_name`
    # this method will do clean only on `text` field
    def clean_text(self):
        """
        Used for:
        1. Transform data into desired format/form/state
        2. Validation
        """

        # for example the provided text can be cast to lower
        return self.cleaned_data['text'].lower()

    # 2. Validation
    # only VALIDATION
    # def clean_assignee(self):
    #     # self.cleaned_data['assignee'] -> Returns object, in our case `Person`
    #
    #     assignee = self.cleaned_data['assignee']
    #
    #     # this code is better to go in `validators.py` and to call the validation func from there
    #     # if assignee.todo_set.count() >= Todo.MAX_TODO_COUNT_PER_PERSON:
    #     #     raise ValidationError(f'{assignee} already has max todos assigned !!!')
    #
    #     validate_max_todos_per_person(assignee)
    #
    #     return assignee

    # 1. Transform data into desired format/form/state
    # TRANSFORM DATA and VALIDATION
    def clean_assignee(self):
        assignee = self.cleaned_data['assignee']

        try:
            validate_max_todos_per_person(assignee)
        except ValidationError:
            assignee = Person.objects.get(name='Unassigned')

        return assignee

